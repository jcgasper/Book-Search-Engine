{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","userData","useQuery","loading","data","removeBook","me","userDataLength","Object","keys","handleDeleteBook","savedBooks","SignupForm","addUser","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","user","log","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2379a912.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($book: NewBook!) {\r\n    saveBook(book: $book) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        _id\r\n        authors\r\n        description\r\n        bookId\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        _id\r\n        authors\r\n        description\r\n        bookId\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // set up mutation hook for graphql call\r\n  const [saveBook] = useMutation(SAVE_BOOK)\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await saveBook({ variables: { book: bookToSave } });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch('/api/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch('/api/users/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch('/api/users', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const GET_ME = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        _id\r\n        authors\r\n        description\r\n        bookId\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;","import React from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\nimport { GET_ME } from '../utils/queries';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\n\r\nconst SavedBooks = () => {\r\n  let userData;\r\n  const { loading, data } = useQuery(GET_ME);\r\n  const [removeBook] = useMutation(REMOVE_BOOK);\r\n\r\n  if (loading) {\r\n    return (<div>Loading...</div>);\r\n  }\r\n  else {\r\n    userData = data.me;\r\n  }\r\n\r\n  // use this to determine if `useEffect()` hook needs to run again\r\n  const userDataLength = Object.keys(userData).length;\r\n\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await removeBook({\r\n        variables: { bookId }\r\n      });\r\n      \r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (!userDataLength) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  const [addUser] = useMutation(ADD_USER);\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({ variables: userFormData });\r\n      const { token, user } = data.addUser;\r\n      console.log(user);\r\n      Auth.login(token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [loginUser] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await loginUser({ variables: userFormData });\r\n      const { token, user } = data.login;\r\n\r\n      console.log(user);\r\n      Auth.login(token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql'\r\n});\r\n\r\nconst authLink = setContext((_, { headers } ) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    }\r\n  }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n})\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path='/' component={SearchBooks} />\r\n            <Route exact path='/saved' component={SavedBooks} />\r\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\r\n          </Switch>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}